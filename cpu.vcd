$version Generated by VerilatedVcd $end
$date Mon Dec  4 20:04:05 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 c a0 [31:0] $end
  $var wire  1 ` clk $end
  $var wire  1 a rst $end
  $var wire  1 b trigger $end
  $scope module cpu $end
   $var wire  1 S ALUSrc_wire $end
   $var wire  3 R ALUctrl_wire [2:0] $end
   $var wire 32 ] ALUop2_wire [31:0] $end
   $var wire 32 \ ALUout_wire [31:0] $end
   $var wire 32 h DATA_WIDTH [31:0] $end
   $var wire  1 P EQ_wire $end
   $var wire  3 T ImmSrc_wire [2:0] $end
   $var wire 32 [ Imm_o_wire [31:0] $end
   $var wire  1 Y JRetSrc_wire $end
   $var wire  1 X JumpSrc_wire $end
   $var wire  1 V MemWrite_wire $end
   $var wire  1 U PCSrc_wire $end
   $var wire 32 e PC_target [31:0] $end
   $var wire 32 $ PCout [31:0] $end
   $var wire 32 % RD1_wire [31:0] $end
   $var wire 32 & RD2_wire [31:0] $end
   $var wire  1 Q RegWrite_wire $end
   $var wire  1 W ResultSrc_wire $end
   $var wire 32 ^ Result_wire [31:0] $end
   $var wire 32 c a0 [31:0] $end
   $var wire  1 ` clk $end
   $var wire 32 # instr_wire [31:0] $end
   $var wire 32 g mem_out [31:0] $end
   $var wire 32 d next_pc [31:0] $end
   $var wire 32 f pc_jump [31:0] $end
   $var wire 32 O pc_plus4 [31:0] $end
   $var wire 32 N pc_wire [31:0] $end
   $var wire  1 a rst $end
   $var wire  1 b trigger $end
   $var wire 32 Z write_to_reg [31:0] $end
   $scope module alu_top $end
    $var wire  3 R ALUControl [2:0] $end
    $var wire 32 \ ALUResult [31:0] $end
    $var wire 32 h DATA_WIDTH [31:0] $end
    $var wire 32 % SrcA [31:0] $end
    $var wire 32 ] SrcB [31:0] $end
    $var wire  1 P Zero $end
   $upscope $end
   $scope module control $end
    $var wire  3 R ALUctrl [2:0] $end
    $var wire  1 S ALUsrc $end
    $var wire  1 P EQ $end
    $var wire  3 T ImmSrc [2:0] $end
    $var wire  1 Y JRetSrc $end
    $var wire  1 X JumpSrc $end
    $var wire  1 V MemWrite $end
    $var wire  1 U PCSrc $end
    $var wire  1 Q RegWrite $end
    $var wire  1 W ResultSrc $end
    $var wire  3 ( funct3 [2:0] $end
    $var wire  1 ) funct7 $end
    $var wire  7 ' opcode [6:0] $end
    $scope module unnamedblk1 $end
     $var wire  7 _ Type_O [6:0] $end
    $upscope $end
   $upscope $end
   $scope module extend $end
    $var wire 32 h DATA_WIDTH [31:0] $end
    $var wire  3 T ImmSrc [2:0] $end
    $var wire 25 * Imm_i [31:7] $end
    $var wire 32 [ Imm_o [31:0] $end
   $upscope $end
   $scope module instr_mem $end
    $var wire 32 h ADDRESS_WIDTH [31:0] $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire 32 $ addr [31:0] $end
    $var wire 32 # dout [31:0] $end
   $upscope $end
   $scope module pc_reg $end
    $var wire 32 $ PC [31:0] $end
    $var wire 32 N PCNext [31:0] $end
    $var wire 32 h WIDTH [31:0] $end
    $var wire  1 ` clk $end
    $var wire  1 a rst $end
   $upscope $end
   $scope module ram $end
    $var wire 32 \ A [31:0] $end
    $var wire 32 i DATA_WIDTH [31:0] $end
    $var wire 32 g RD [31:0] $end
    $var wire 32 & WD [31:0] $end
    $var wire  1 V WE $end
    $var wire 32 h WIDTH [31:0] $end
    $var wire  1 ` clk $end
   $upscope $end
   $scope module regfile_top $end
    $var wire  5 + AD1 [4:0] $end
    $var wire  5 , AD2 [4:0] $end
    $var wire  5 - AD3 [4:0] $end
    $var wire 32 j ADDRESS_WIDTH [31:0] $end
    $var wire 32 h DATA_WIDTH [31:0] $end
    $var wire 32 % RD1 [31:0] $end
    $var wire 32 & RD2 [31:0] $end
    $var wire 32 Z WD3 [31:0] $end
    $var wire  1 Q WE3 $end
    $var wire 32 c a0 [31:0] $end
    $var wire  1 ` clk $end
    $var wire 32 # instr [31:0] $end
    $var wire 32 . registers[0] [31:0] $end
    $var wire 32 8 registers[10] [31:0] $end
    $var wire 32 9 registers[11] [31:0] $end
    $var wire 32 : registers[12] [31:0] $end
    $var wire 32 ; registers[13] [31:0] $end
    $var wire 32 < registers[14] [31:0] $end
    $var wire 32 = registers[15] [31:0] $end
    $var wire 32 > registers[16] [31:0] $end
    $var wire 32 ? registers[17] [31:0] $end
    $var wire 32 @ registers[18] [31:0] $end
    $var wire 32 A registers[19] [31:0] $end
    $var wire 32 / registers[1] [31:0] $end
    $var wire 32 B registers[20] [31:0] $end
    $var wire 32 C registers[21] [31:0] $end
    $var wire 32 D registers[22] [31:0] $end
    $var wire 32 E registers[23] [31:0] $end
    $var wire 32 F registers[24] [31:0] $end
    $var wire 32 G registers[25] [31:0] $end
    $var wire 32 H registers[26] [31:0] $end
    $var wire 32 I registers[27] [31:0] $end
    $var wire 32 J registers[28] [31:0] $end
    $var wire 32 K registers[29] [31:0] $end
    $var wire 32 0 registers[2] [31:0] $end
    $var wire 32 L registers[30] [31:0] $end
    $var wire 32 M registers[31] [31:0] $end
    $var wire 32 1 registers[3] [31:0] $end
    $var wire 32 2 registers[4] [31:0] $end
    $var wire 32 3 registers[5] [31:0] $end
    $var wire 32 4 registers[6] [31:0] $end
    $var wire 32 5 registers[7] [31:0] $end
    $var wire 32 6 registers[8] [31:0] $end
    $var wire 32 7 registers[9] [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b0000000 '
b000 (
0)
b0000000000000000000000000 *
b00000 +
b00000 ,
b00000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000100 O
0P
0Q
b000 R
0S
b000 T
0U
0V
0W
0X
0Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b0000000 _
0`
0a
1b
b00000000000000000000000000000000 c
b00000000000000000000000000000100 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000100000 h
b00000000000000000000000000001000 i
b00000000000000000000000000000101 j
